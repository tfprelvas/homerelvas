# This is the template for property file of test, integration and prod Profiles.
# To activate a specific profile, you should pass a JVM Option in the corresponding
# Standalone.conf (Standalone.conf.bat for Windows) like the following:
# JAVA_OPTS="$JAVA_OPTS -Dspring.profiles.active=test"

#######ParcelOS FWK Properties#######
# These properties are shared among all subsystems via incorporating ParcelOS FWK components

####### Environment Profile #######
# It should always be set to dev in  dev.properties or <subsystem>-dev.properties
env=prod

#tenantKey
tenantKey=GLS_DE
nodeKey=parcelos-de-460
deviceKey=GLS-NODE-parcelos-de-460
################## ParcelOS Persistence Configuration #########################

# This is the jndi data source for ParcelOS DB
# It must be configured for wildfly
parcelos.db.jndi.name=java:jboss/datasources/PARCELOS_DS
# If connecting to postgresql DB
parcelos.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# If connecting to H2 DB, NOT RECOMMENDED except for dev
## parcelos.hibernate.dialect=org.hibernate.dialect.H2Dialect

################## UniQue Persistence Configuration ###########################

# This is the jndi data source for UniQue DB can be accessed by ParcelOS components
# It can be the case for direct DB access for Data Exchange purpose.
# It must be configured for wildfly
unique.db.jndi.name=java:jboss/datasources/UNIQUE_DS

# Actually all UniQue Databases are implemented in IBM AS400 DBMS
## unique.hibernate.dialect=org.hibernate.dialect.DB2400Dialect

# For test purpose we may use a PostgreSQL installation
unique.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

################## Staging Persistence Configuration ##########################

# Leave it blank as long as we no stating DB is in use by your component
staging.db.jndi.name=
staging.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect


################## Universal Hibernate Configuration ##########################
# See hibernate documentation for details on hibernate JPA properties

#######  Hibernate Configuration #######

# User-friendly formatting of hibernate output for sql statement
hibernate.format_sql=true

# It will be decommissioned by means of flyway.
# We will never manually create/drop/alter tables any longer.
## hibernate.hbm2ddl.auto=none

# org.hibernate.cfg.AnnotationBinder: HHH000457: Joined inheritance hierarchy [eu.gls.parcelos.parcel.spec.common.persistence.entity.ConsignmentEntity] defined explicit @DiscriminatorColumn.
# Legacy Hibernate behavior was to ignore the @DiscriminatorColumn.
# However, as part of issue HHH-6911 we now apply the explicit @DiscriminatorColumn.
# If you would prefer the legacy behavior, enable the `hibernate.discriminator.ignore_explicit_for_joined` setting (hibernate.discriminator.ignore_explicit_for_joined=true)
hibernate.discriminator.ignore_explicit_for_joined=false

# Use more user-friendly aliases in sql statements
hibernate.ejb.naming_strategy=org.hibernate.cfg.ImprovedNamingStrategy

# Enable sql statement logging. Parameters still not bound and appear as place holder
hibernate.show_sql=true

# ParcelOS uses its own caching mechanism. We keep hibernate caching disabled.
hibernate.cache.use_second_level_cache=false

# No Bean Validation by Hibernate. Validations are taken place dependent to given context in in ParcelOS
javax.persistence.validation.mode=none

# No SQL query cache by hibernate
hibernate.cache.use_query_cache=false

# Show statistics on Transaction level
hibernate.generate_statistics=true

# For bulk and long running transactions we want to batch statements to reduce the network overhead
hibernate.jdbc.batch_size=50

# Jadira library (to handle joda local date and time) is not taken out and obsolete
jadira.usertype.databaseZone=UTC
jadira.usertype.javaZone=UTC
jadira.usertype.autoRegisterUserTypes=true

################## Replication Configuration ##################################

# Sets the NodeKey for current installation
# It is used to enrich the replicated parcel operations (MOP) to the central computation center
replication.ownkey=parcelos-de-460

# Sets the HeadquarterKey (NodeKey).
# Headquarter: Leave it empty
# Depot: Route the Bundles to this node
replication.headquarterkey=parcelos-de-central
replication.distributed=true
# Set the replication max result set size
parcel.replication.max.result.set.size=400
cron.replicationMopBundle=*/30 * * * * *
# Set the delay between a finished mopBundles processing task and the next mopBundles pulling start point. Default 10 S
parcel.replication.fixed.delay:5000

parcel.replication.deleteoldmopbudle.max.result.set.size=1024

# Set the cron definition for the job of transfer the MOP
replication.cron=0,30 * * * * ?

# The context path of the parcelservice which will be called in the central application.
subsystem.parcel.path=/parcelservice/api/v0/

# Set the replication service url
parcel.replication.service.url=/replicationservice/api/v0/

# Set the replication retry waiting time. Default value is 60 min
parcel.replication.retry.waiting.time=60
# Set the highest possible random retry waiting time value
parcel.replication.max.random.retry.waiting.time=10
# Set the cron definition for the replication login job
replication.authentication.login.cron=0 0/30 * * * ?

# set number of retry attempts (POS-9149)
service.retries.number=3

### replication
replication.authentication.login.name=uniqueos.replica
replication.authentication.password=31doISET8D
replication.authentication.location.key=GLS_DE_DE-680
replication.authentication.device.profile.key=pilot
###

# NextDeliveryStopId: allowed retries (min 2, max 5)
transport.next-delivery-stop.max-retry=3

##################### Configuration for scheduling #################################
parcelos.scheduling.threadpoolsize=20


################## Service Endpoint Configuration ##################################

###### PARCEL FLOW ENDPOINT ########
# ENDPOINT allows to call services defined on PacelFLow subsystem
parcelflow.service.endpoint=http://parcelos-parcel-flow:8080/parcelflowservice/api/v0

###### PARCEL ENDPOINT ########
# ENDPOINT allows to call services defined on Parcel subsystem
parcel.service.endpoint=http://parcelos-parcel:8080/parcelservice/api/v0

###### SEED MASTER DATA ENDPOINT ######
# ENDPOINT allows to call services defined on that subsystem
seedmasterdata.service.endpoint=http://parcelos-seedmasterdata:8080/seedmasterdataservice/api/v0

###### TRANSPORT SUBSYSTEM ENDPOINT ######
# ENDPOINT allows to call services defined on that subsystem
transport.service.endpoint=http://parcelos-transport:8080/transportservice/api/v0

###### ORDER SUBSYSTEM ENDPOINT ######
# ENDPOINT allows to call services defined on that subsystem
order.service.endpoint=http://parcelos-order:8080/orderservice/api/v0

###### PARTNER SUBSYSTEM ENDPOINT ######
# ENDPOINT allows to call services defined on that subsystem
partner.service.endpoint=http://parcelos-partner:8080/partnerservice/api/v0

###### PARTNER CENTRAL SUBSYSTEM ENDPOINT ######
# ENDPOINT allows to call partner central services
# Central Partner Subsystem URI to query about parcel shop data on collection order import.
# The collection order import is running on Node Server.
# And the Parcel Shop is replicated from Central to Node server, so the endpoint is needed because of that.
partner.service.central.endpoint=https://parcelos-de-central.uniqueos-prd.cloud.gls-group.eu/partnerservice/api/v0

###### USER SUBSYSTEM ENDPOINT ######
# ENDPOINT allows to call user subsystem services
# User Subsystem URI to query.
user.service.endpoint=http://parcelos-user:8080/userservice/api/v0

###### USER CENTRAL SUBSYSTEM ENDPOINT ######
# ENDPOINT allows to call user central services
# Central User Subsystem URI to create LDAP User Accounts in Driver import.
# The Driver import is running on Node Server.
# The User Account (modified during creation of LDAP User Account) is replicated from Central to Node server, so the endpoint is needed because of that.
user.service.central.endpoint=https://parcelos-de-central.uniqueos-prd.cloud.gls-group.eu/userservice/api/v0

###### TRANSPORT FLOW SUBSYSTEM ENDPOINT ######
# ENDPOINT allows to call services defined on that subsystem
transportflow.service.endpoint=http://parcelos-transport-flow:8080/transportflowservice/api/v0

###### PARTNER CENTRAL SUBSYSTEM ENDPOINT ######
# ENDPOINT allows to call partner flow services
partnerflow.service.endpoint=http://parcelos-partner-flow:8080/partnerflowservice/api/v0

###### Legacy Breach Service Endpoint #####
# ENDPOINT Allows to call legacy breach services
legacybreach.service.endpoint=http://parcelos-legacy-breach:8080/legacybreachservice/api/v0

###### Node server official time zone
#
depot.nodeserver.timezone=Europe/Berlin

# tbd check to move this properties to legacybreach properties.
#
# Central Image FTP Upload Properties
#
# add all failover ftp server as a comma separated list
ftp.central.host=193.106.225.113:21,193.106.224.225:21
ftp.central.port=21
ftp.central.user=glsde03
ftp.central.password=dedeu276
ftp.central.imageUploadDirectory=/de-460/in
ftp.central.timeout.millisec=30000

#
# Gateway Image FTP Upload Properties
#
ftp.gateway.host=10.2.46.9
ftp.gateway.port=21
ftp.gateway.user=glsgwftp
ftp.gateway.password=ptfwgslg
ftp.gateway.imageUploadDirectory=/out/

## default lock type code to be used on storing a parcel in warehouse service
parcel.warehouse.defaultLockTypeCode=OPERATIONS_STOREDINWAREHOUSE
## default location role key to be used on storing a parcel in warehouse service
parcel.warehouse.defaultLocationRoleKey=ALL

########### maximum URL length supported by web server #########
maxUrlTotalLength=2048

##################### LDAP Provider ###########################
## LDAP Configuration as ParcelOS' Authentication Component####
## This is the way, the GLS's Novel LDAP Provider is configured and has to be qeuried
## It might be different for a new LDAP provider and then we have to either change the
## our code and configuration or use the same setting for new provider
ldap-url=ldap://uniqueos-prd-application-nlb-int-c0180781ac8e4fcb.elb.eu-central-1.amazonaws.com
ldap-port=10389
ldap-context-root=OU=uniqueos-prd-ap,DC=uniqueos-prd-application,DC=uniqueos-prd,DC=cloud,DC=gls-group,DC=eu
user-search-filter=(sAMAccountName={0})
manager-dn=CN=superuser,OU=users,OU=uniqueos-prd-ap,DC=uniqueos-prd-application,DC=uniqueos-prd,DC=cloud,DC=gls-group,DC=eu
manager-password=UQua7yX3f9La
user-dn-patterns=sAMAccountName={0}
user-search-base=
group-search-base=ou=groups
role-search-base=ou=roles
group-search-filter=(member={0})
group-role-attribute=cn


##################### PROPERTIES FOR THE USER IMPORT FROM LDAP ###########################
## TEMPORARY SOLUTION UNTIL THE USER AUTHENTICATION AND USER IMPORT BOTH USE AWS ##
## BE CAREFUL TO HAVE NOT DUPLICATED PROPERTIES                                  ##
# ldap-url=ldap://parcelos-acceptance-awsad-int-b7be736bb76c2cab.elb.eu-central-1.amazonaws.com
# ldap-port=389
# ldap-context-root=OU=Users,OU=parcelos,DC=gls,DC=parcelos,DC=com
# manager-dn=reader
# manager-password=<password of the manager-dn, that is the reader user>


## As a convenience the ParcelOS User System provides an embedded and easy to extend
# LDAP provider for Test Profile.
# If you want to switch to this embedded provider activate the following parameter
## parcelos.user.auth.config.class=eu.gls.parcelos.user.jee.domain.authconfig.ParcelOSInsecureWebConfig

parcelos.user.auth.config.class=eu.gls.parcelos.user.embedded.jee.domain.authconfig.ParcelOSServiceSecurityNoneExtender
parcelos.user.auth.token.factory.class=eu.gls.parcelos.user.embedded.jee.domain.auth.ParcelOSAuthTokenFactoryDefault


## The default file for embedded LDAP provider
# Change it only you really have to, e.g. run a show case with other temporary users.
## parcelos.user.auth.ldap.file=users.ldif

jboss.qualified.host.name=rabbit-mq

## AMQP Configuration Properties
# Enables AMQP spring beans processing. Default: false
#parcelos.amqp.enabled=false
parcelos.amqp.enabled=false
# AMQP broker hostname. Default: localhost
#parcelos.amqp.hostname=localhost
parcelos.amqp.hostname=rabbit-mq
parcelos.amqp.message.ttl=86400000
parcelos.amqp.maxAttempts=3
parcelos.amqp.maxAttempts.multiplier=5
#AMQP broker port. Default: 5672
parcelos.amqp.port=5672
#AMQP broker account's username. Default: guest
parcelos.amqp.username=parcelosMQ
# AMQP broker account's password. Default: guest
parcelos.amqp.password=a_H[y7:tKcF]
# The maximum number of attempts to send a message in case of any exception. Default: 5
parcelos.amqp.retry.max_attempts=1
# Initial sleep interval value before a retry in milliseconds. Default: 500
parcelos.amqp.backoff.initial_interval_ms=500
# Set the retry exponential backoff multiplier value. Hint: do not use values much in excess of 1.0
# (or the backoff will get very long very fast). Default: 2.0
parcelos.amqp.backoff.multiplier=2.0
# Maximum wait period before a retry in milliseconds. Set this to avoid infinite waits if backing off a large number
# of times (or if the multiplier is set too high). Default: 10000
parcelos.amqp.backoff.max_interval_ms=500

#### Cache watchdog ########
# We have to set the default values (24 h) here as long as not all components are
# upgraded to respective SMD version and use the reset mechanism.
cache.sync.rate=86400000
cache.sync.initial.delay=86400000

#################  Asymmetric Key for JWS ############################
parcelos.keystore.fqn.path=/etc/ssl/parcelos.p12
parcelos.keystore.user.key.alias=ES512
parcelos.keystore.access.pass=1234.P
parcelos.keystore.jws.pass=1234.P


## This section contains properties to maintain details on a so-called deprecated signing key
## As long as all details on a deprecated key are maintained in this section,
## ParcelOS API Key security component for ReST services accepts valid and not expired JWT Tokens,
## which were originally signed by that key.
## As soon as "any" of the following attributes is not available, ParcelOS rejects those tokens

## Hint 1: Defaults should be empty or blank values, or comment them all out, like this.
## Hint 2: If you are supposed to enable this feature, don't enter values directly, but use proper ansible placeholders
# deprecated.parcelos.keystore.fqn.path=/etc/ssl/parcelos.p12
# deprecated.parcelos.keystore.user.key.alias=ES512
# deprecated.parcelos.keystore.jws.pass=1234.P
# deprecated.parcelos.keystore.access.pass=1234.P


#################  Multi-Tenancy Configuration ############################
# This contains the a csv list of TenantKey, whose data are taken into consideration by ParcelOS system
# For example this includes we import Devices from SOTI MDM only for the given Tenants
parcelos.tenancy.list=GLS_DE

## This is the Tenant Key which is the leading Tenant for Overall Configuration in ParcelOS Computation Center
## Given that the Austria, Ireland and Germany Depots will be served by a computation center which is located in Germany
## The default Tenant in this case will be GLS Germany
parcelos.configuration.default.tenant.key=GLS_DE

